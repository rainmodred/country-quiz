{"version":3,"sources":["images/background.png","styles/Global.tsx","api.ts","components/Spinner.tsx","styles/colors.ts","components/Button.tsx","components/Option.tsx","components/QuestionWrapper.tsx","images/winners.svg","components/Result.tsx","components/Error.tsx","utils.ts","images/adventure.svg","components/Quiz.tsx","hooks/useCountries.ts","App.tsx","index.tsx"],"names":["GlobalStyles","styles","css","backgroundImage","url","getAllCountries","a","axios","get","resp","data","spin","keyframes","transform","StyledSpinner","styled","ImSpinner8","animation","Spinner","className","size","title","defaultProps","colors","Button","children","primary","onClick","type","Option","answer","disabled","wrong","variant","text","isWrong","isCorrect","correct","handleClick","event","currentAnswer","currentTarget","blur","bgColor","QuestionWrapper","question","questionIndex","totalQuestions","onAnswerClick","onNextClick","useState","setCurrentAnswer","setDisabled","flag","asnwers","handleOptionClick","useEffect","src","alt","map","Result","correctAnwers","onNewQuiz","Winners","Error","message","getRandomCountry","countries","Math","floor","random","length","createAnswers","correctAnswer","answers","variants","splice","join","push","capital","every","pop","sort","b","localeCompare","Quiz","queryClient","useQueryClient","result","useQuery","retry","staleTime","initialData","getQueryData","useCountries","isSuccess","isError","error","questions","setQuestions","setQuestionIndex","correctAnswers","setCorrectAnswers","isQuizEnded","handleNextQuestion","handleAnswerClick","handleNewQuiz","count","name","createQuestions","forEach","Image","Logo","QueryClient","defaultOptions","queries","refetchOnWindowFocus","App","QueryClientProvider","client","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1246bf44.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/background.41dbc550.png\";","/** @jsxImportSource @emotion/react */\nimport { Global, css } from '@emotion/react';\nimport backgroundImage from '../images/background.png';\n\nexport default function GlobalStyles() {\n  return (\n    <Global\n      styles={css`\n        *,\n        *::before,\n        *::after {\n          box-sizing: border-box;\n          padding: 0;\n          margin: 0;\n        }\n        html {\n          font-family: Poppins, sans-serif;\n        }\n\n        body {\n          background: url(${backgroundImage}) center no-repeat;\n          background-size: cover;\n          height: 100vh;\n          display: grid;\n          place-content: center;\n          padding: 10px;\n        }\n      `}\n    />\n  );\n}\n","import axios from 'axios';\nimport { Countries } from './types';\n\nconst url = 'https://restcountries.eu/rest/v2/all';\n\nasync function getAllCountries() {\n  const resp = await axios.get<Countries>(url);\n  return resp?.data;\n}\n\nexport { getAllCountries };\n","import { keyframes } from '@emotion/react';\nimport styled from '@emotion/styled/';\nimport { ImSpinner8 } from 'react-icons/im';\n\nconst spin = keyframes({\n  '0%': { transform: 'rotate(0deg)' },\n  '100%': { transform: 'rotate(360deg)' },\n});\n\nconst StyledSpinner = styled(ImSpinner8)({\n  animation: `${spin} 1s linear infinite`,\n});\n\nStyledSpinner.defaultProps = {\n  'aria-label': 'loading',\n};\n\nexport default function Spinner() {\n  return <StyledSpinner className=\"spinner\" size=\"60px\" title=\"spinner\" />;\n}\n\nexport { Spinner };\n","export const colors = {\n  colorWhite: 'rgba(255, 255, 255, 1)',\n  colorHeaderText: 'rgba(242, 242, 242, 1)',\n  colorResult: 'rgba(29, 53, 93, 1)',\n  colorHover: 'rgba(249, 168, 38, 1)',\n  colorOptionText: 'rgba(96, 102, 208, 0.8)',\n  colorOptionBorder: 'rgba(96, 102, 208, 0.7)',\n  colorWrongBg: 'rgba(234, 130, 130, 1)',\n  colorCorrectBg: 'rgba(96, 191, 136, 1)',\n  colorQuestionText: 'rgba(47, 82, 123, 1)',\n  colorShadow: 'rgba(252, 168, 47, 0.4)',\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { colors } from '../styles/colors';\n\ninterface ButtonProps {\n  children: React.ReactNode;\n  primary?: boolean;\n  onClick?: () => void;\n}\n\nexport default function Button({ children, primary, onClick }: ButtonProps) {\n  return (\n    <button\n      onClick={onClick}\n      type=\"button\"\n      css={css`\n        border-radius: 12px;\n        font-size: 18px;\n        line-height: 27px;\n        font-weight: 700;\n        border: none;\n        cursor: pointer;\n        transition: all 0.2s ease-in;\n        padding: ${primary ? '15px 36px 14px 37px' : ' 18px 61px 17px 61px'};\n        border: ${primary ? 'none' : `2px solid ${colors.colorResult}`};\n        color: ${primary ? colors.colorWhite : colors.colorResult};\n        background: ${primary ? colors.colorHover : 'none'};\n        box-shadow: ${primary ? `0px 2px 4px ${colors.colorShadow}` : 'none'};\n        &:hover {\n          opacity: 0.7;\n        }\n      `}\n    >\n      {children}\n    </button>\n  );\n}\n","/** @jsxImportSource @emotion/react */\nimport { AiOutlineCheckCircle, AiOutlineCloseCircle } from 'react-icons/ai';\nimport { css } from '@emotion/react';\n\nimport { Answer } from 'types';\nimport { colors } from '../styles/colors';\n\ninterface OptionProps {\n  answer: Answer;\n  wrong?: boolean;\n  disabled: boolean;\n  onClick: (answer: Answer) => void;\n}\n\nexport default function Option({\n  answer,\n  disabled = false,\n  wrong = false,\n  onClick,\n}: OptionProps): JSX.Element {\n  const { variant, text, correct } = answer;\n\n  const isWrong = wrong && disabled;\n  const isCorrect = correct && disabled;\n\n  function handleClick(\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n    currentAnswer: Answer,\n  ) {\n    event.currentTarget.blur();\n    onClick(currentAnswer);\n  }\n\n  let bgColor = 'none';\n  if (isWrong) {\n    bgColor = colors.colorWrongBg;\n  }\n  if (isCorrect) {\n    bgColor = colors.colorCorrectBg;\n  }\n\n  return (\n    <button\n      onClick={event => handleClick(event, answer)}\n      type=\"button\"\n      css={css`\n        border-radius: 12px;\n        border: ${isWrong || isCorrect\n          ? 'none'\n          : `2px solid ${colors.colorOptionBorder}`};\n        background: ${bgColor};\n        max-height: 56px;\n        width: 100%;\n        max-width: 400px;\n        overflow: hidden;\n        transition: all 0.2s ease-in-out;\n        color: ${isWrong || isCorrect\n          ? colors.colorWhite\n          : colors.colorOptionText};\n        cursor: pointer;\n        display: flex;\n        align-items: center;\n        padding: 15px 18px 14px 19px;\n        pointer-events: ${disabled && 'none'};\n        & > span {\n          font-size: 18px;\n          line-height: 27px;\n          font-weight: 500;\n        }\n        &:hover {\n          background-color: ${bgColor === 'none' ? colors.colorHover : bgColor};\n          color: ${colors.colorWhite};\n          border: none;\n        }\n      `}\n    >\n      <span\n        css={css`\n          margin-right: 45px;\n        `}\n      >\n        {variant}\n      </span>\n      <span\n        css={css`\n          margin-right: auto;\n          white-space: nowrap;\n          overflow: hidden;\n        `}\n      >\n        {text}\n      </span>\n      {isWrong && <AiOutlineCloseCircle size=\"20\" title=\"closeIcon\" />}\n      {isCorrect && <AiOutlineCheckCircle size=\"20\" title=\"checkIcon\" />}\n    </button>\n  );\n}\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { useEffect, useState } from 'react';\n\nimport Button from './Button';\nimport Option from './Option';\nimport { Answer, Question } from '../types';\nimport { colors } from '../styles/colors';\n\ninterface QuestionProps {\n  question: Question;\n  questionIndex: number;\n  totalQuestions: number;\n  onAnswerClick: (answer: boolean) => void;\n  onNextClick: () => void;\n}\n\nexport default function QuestionWrapper({\n  question,\n  questionIndex,\n  totalQuestions,\n  onAnswerClick,\n  onNextClick,\n}: QuestionProps) {\n  const [currentAnswer, setCurrentAnswer] = useState<Answer | null>(null);\n  const [disabled, setDisabled] = useState(false);\n\n  const { type, flag, text, asnwers } = question;\n\n  function handleOptionClick(answer: Answer) {\n    setDisabled(true);\n    setCurrentAnswer(answer);\n    onAnswerClick(answer.correct);\n  }\n\n  useEffect(() => {\n    setDisabled(false);\n  }, [question]);\n\n  const isWrong = disabled && !currentAnswer?.correct;\n\n  return (\n    <div\n      css={css`\n        padding: 68px 32px 64px 32px;\n        display: grid;\n        row-gap: 25px;\n        width: 100%;\n        @media (max-width: 768px) {\n          row-gap: 10px;\n          padding: 65px 25px 25px 25px;\n          padding-top: ${type === 'flag' ? '20px' : '65px'};\n        }\n      `}\n    >\n      {type === 'flag' && (\n        <img\n          src={flag}\n          alt=\"flag\"\n          css={css`\n            min-height: 56px;\n            width: 84px;\n            filter: drop-shadow(0px 4px 24px rgba(0, 0, 0, 0.1));\n            @media (max-width: 768px) {\n              padding-top: 20px;\n            }\n          `}\n        />\n      )}\n      <h3\n        css={css`\n          color: ${colors.colorQuestionText};\n          font-size: 24px;\n          line-height: 36px;\n          font-weight: 700;\n          @media (max-width: 768px) {\n            font-size: 24px;\n            line-height: 34px;\n          }\n        `}\n      >\n        {text}\n      </h3>\n      {asnwers.map(answer => (\n        <Option\n          answer={answer}\n          wrong={isWrong && answer.text === currentAnswer?.text}\n          disabled={disabled}\n          onClick={handleOptionClick}\n          key={answer.text}\n        />\n      ))}\n\n      <div\n        css={css`\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          height: 56px;\n        `}\n      >\n        <span\n          css={css`\n            font-size: 14px;\n            margin-left: 5px;\n          `}\n        >\n          {questionIndex + 1} / {totalQuestions}\n        </span>\n        {disabled && (\n          <Button primary onClick={onNextClick}>\n            Next\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/winners.d76bfdf8.svg\";","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\n\nimport { colors } from '../styles/colors';\nimport Button from './Button';\nimport Winners from '../images/winners.svg';\n\ninterface ResultProps {\n  correctAnwers: number;\n  onNewQuiz: () => void;\n}\n\nexport default function Result({ correctAnwers, onNewQuiz }: ResultProps) {\n  return (\n    <div\n      css={css`\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        color: ${colors.colorResult};\n        padding: 49px 108px 33px 108px;\n        row-gap: 70px;\n        @media (max-width: 768px) {\n          padding: 20px;\n          row-gap: 25px;\n        }\n      `}\n    >\n      <img\n        css={css`\n          min-height: 136px;\n        `}\n        src={Winners}\n        alt=\"\"\n      />\n      <h3\n        css={css`\n          font-size: 48px;\n          line-height: 72px;\n          font-weight: 700;\n        `}\n      >\n        Results\n      </h3>\n      <p\n        css={css`\n          font-size: 18px;\n          line-height: 27px;\n          font-weight: 400;\n          & > span {\n            font-size: 36px;\n            line-height: 54px;\n            color: ${colors.colorCorrectBg};\n            font-weight: 700;\n          }\n        `}\n      >\n        You got <span>{correctAnwers}</span> correct answers\n      </p>\n      <Button onClick={onNewQuiz}>Try again</Button>\n    </div>\n  );\n}\n","interface ErrorProps {\n  message: string | undefined;\n}\n\nexport default function Error({ message }: ErrorProps) {\n  return (\n    <div>\n      <h3>Error</h3>\n      <p>{message}</p>\n    </div>\n  );\n}\n","import {\n  Answer,\n  Countries,\n  Country,\n  Question,\n  Questions,\n  Answers,\n} from './types';\n\nfunction getRandomCountry(countries: Countries): Country {\n  return countries[Math.floor(Math.random() * countries.length)];\n}\n\nfunction createAnswers(countries: Countries, correctAnswer: string): Answer[] {\n  const anwersQuantity = 4;\n  const answers: Answers = [];\n  const variants = ['A', 'B', 'C', 'D'];\n\n  const variant = variants\n    .splice(Math.floor(Math.random() * anwersQuantity), 1)\n    .join('');\n\n  answers.push({\n    variant,\n    text: correctAnswer,\n    correct: true,\n  });\n\n  while (answers.length !== anwersQuantity) {\n    const { capital } = getRandomCountry(countries);\n    if (\n      variants.length > 0 &&\n      capital !== '' &&\n      answers.every(answer => answer.text !== capital)\n    ) {\n      answers.push({\n        variant: variants.pop() as string,\n        text: capital,\n        correct: false,\n      });\n    }\n  }\n  return answers.sort((a, b) => a.variant.localeCompare(b.variant));\n}\n\nfunction createQuestions(countries: Countries, count: number = 10): Question[] {\n  const questions: Questions = [];\n\n  while (questions.length !== count) {\n    const { name, flag, capital } = getRandomCountry(countries);\n\n    const type = Math.random() > 0.5 ? 'flag' : 'capital';\n    if (type === 'capital' && capital === '') {\n      continue;\n    }\n\n    questions.push({\n      type,\n      name,\n      flag,\n      text:\n        type === 'flag'\n          ? `Which country does this flag belong to?`\n          : `${capital} is the capital of`,\n      asnwers: createAnswers(countries, name),\n    });\n  }\n\n  return questions;\n}\n\nexport { createQuestions };\n","export default __webpack_public_path__ + \"static/media/adventure.182b6171.svg\";","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { useEffect, useState } from 'react';\n\nimport { useCountries } from 'hooks/useCountries';\nimport Spinner from 'components/Spinner';\nimport QuestionWrapper from './QuestionWrapper';\nimport Result from './Result';\nimport Error from './Error';\nimport { Questions } from '../types';\nimport { createQuestions } from '../utils';\nimport Logo from '../images/adventure.svg';\nimport { colors } from '../styles/colors';\n\ninterface QuizProps {\n  totalQuestions: number;\n}\n\nfunction Quiz({ totalQuestions = 10 }: QuizProps) {\n  const { countries, isSuccess, isError, error } = useCountries();\n  const [questions, setQuestions] = useState<Questions>([]);\n  const [questionIndex, setQuestionIndex] = useState(0);\n  const [correctAnswers, setCorrectAnswers] = useState(0);\n\n  const isQuizEnded =\n    questions.length > 0 && questionIndex === questions.length;\n\n  function handleNextQuestion() {\n    if (questionIndex < questions.length) {\n      setQuestionIndex(questionIndex + 1);\n    }\n  }\n\n  function handleAnswerClick(isCorrect: boolean) {\n    if (isCorrect) {\n      setCorrectAnswers(correctAnswers + 1);\n    }\n  }\n\n  function handleNewQuiz() {\n    if (countries) {\n      setQuestions(createQuestions(countries, totalQuestions));\n      setCorrectAnswers(0);\n      setQuestionIndex(0);\n    }\n  }\n\n  useEffect(() => {\n    if (questions.length > 0) {\n      questions.forEach(({ type, flag }) => {\n        if (type === 'flag') {\n          const img = new Image();\n          img.src = flag;\n        }\n      });\n    }\n  }, [questions]);\n\n  useEffect(() => {\n    handleNewQuiz();\n  }, [isSuccess]);\n\n  function renderQuestion() {\n    if (isError) {\n      return <Error message={error?.message} />;\n    }\n    if (isQuizEnded) {\n      return (\n        <Result correctAnwers={correctAnswers} onNewQuiz={handleNewQuiz} />\n      );\n    }\n    if (questions.length > 0) {\n      return (\n        <QuestionWrapper\n          questionIndex={questionIndex}\n          question={questions[questionIndex]}\n          totalQuestions={totalQuestions}\n          onAnswerClick={handleAnswerClick}\n          onNextClick={handleNextQuestion}\n        />\n      );\n    }\n    return <Spinner />;\n  }\n  return (\n    <div\n      css={css`\n        position: relative;\n        max-width: 464px;\n      `}\n    >\n      <h2\n        css={css`\n          color: ${colors.colorHeaderText};\n          font-size: 36px;\n          line-height: 54px;\n          font-weight: 700;\n          text-transform: uppercase;\n          @media (max-width: 768px) {\n            font-size: 24px;\n            line-height: 24px;\n            margin-bottom: 10px;\n          }\n        `}\n      >\n        country quiz\n      </h2>\n      {!isQuizEnded && (\n        <img\n          css={css`\n            position: absolute;\n            content: '';\n            display: block;\n            top: -20px;\n            right: 0;\n          `}\n          src={Logo}\n          alt=\"\"\n        />\n      )}\n      <div\n        css={css`\n          background-color: ${colors.colorWhite};\n          border-radius: 24px;\n          display: grid;\n          grid-template-columns: minmax(0, 464px);\n          min-height: 515px;\n          place-items: center;\n          @media (max-width: 768px) {\n            min-height: 400px;\n          }\n        `}\n      >\n        {renderQuestion()}\n      </div>\n    </div>\n  );\n}\n\nexport default Quiz;\n","import { useQuery, useQueryClient } from 'react-query';\nimport { Countries } from 'types';\nimport { getAllCountries } from '../api';\n\nconst staleTime = 1000 * 60 * 60;\n\nfunction useCountries() {\n  const queryClient = useQueryClient();\n  const result = useQuery<Countries | null, Error>(\n    'countries',\n    getAllCountries,\n    {\n      retry: 1,\n      staleTime,\n      initialData: () => queryClient.getQueryData('countries'),\n    },\n  );\n\n  return { ...result, countries: result.data };\n}\n\nexport { useCountries };\n","import { QueryClient, QueryClientProvider } from 'react-query';\nimport Quiz from './components/Quiz';\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      retry: false,\n      refetchOnWindowFocus: false,\n    },\n  },\n});\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <Quiz totalQuestions={10} />\n    </QueryClientProvider>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GlobalStyles from 'styles/Global';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyles />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}